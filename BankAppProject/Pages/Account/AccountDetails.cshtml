@page "{accountId:int}/{customerId:int}"
@model BankAppProject.Pages.Account.AccountDetailsModel
@{
}
<a asp-page="/Customer/CustomerDetails"
   asp-route-customerId="@Model.CustomerId"
   class="btn btn-primary mb-2">
    <i class="fa-solid fa-arrow-left"></i>
</a>
<!-- Kontoinfo -->
<div class="card-header d-flex flex-wrap justify-content-between align-items-center p-2">
    <h2 class="mb-0">Account nr: @Model.Account.AccountId</h2>
    <form method="post" asp-page-handler="Delete" onsubmit="return confirm('Are you sure you want to Inactivate this account?')">
        <input type="hidden" name="customerId" value="@Model.CustomerId" />
        <input type="hidden" name="accountId" value="@Model.Account.AccountId" />
        <button type="submit" class="btn btn-outline-danger">Inactivate <i class="fa-solid fa-trash"></i></button>
    </form>
</div>
<div class="card d-flex flex-row flex-wrap justify-content-between mb-3 p-2">
    <p class="mb-0 me-2 mr-3 small-p"><strong>Balance:</strong> @Model.Account.Balance.ToString("C", new System.Globalization.CultureInfo("de-DE"))</p>
    <p class="mb-0 small-p"><strong>Created:</strong> @Model.Account.Created.ToShortDateString()</p>
</div>
<div class="d-flex flex-wrap justify-content-between">
    <a asp-page="/Account/Deposit"
       asp-route-accountId="@Model.Account.AccountId"
       asp-route-customerId="@Model.CustomerId"
       class="btn btn-outline-primary dwt-btn">
       Deposit <i class="fa-solid fa-plus"></i>
    </a>
    <a asp-page="/Account/Withdraw"
       asp-route-accountId="@Model.Account.AccountId"
       asp-route-customerId="@Model.CustomerId"
       class="btn btn-outline-primary dwt-btn">
        Withdraw <i class="fa-solid fa-minus"></i>
    </a>
    <a asp-page="/Account/Transfer"
       asp-route-accountId="@Model.Account.AccountId"
       asp-route-customerId="@Model.CustomerId"
       class="btn btn-outline-primary dwt-btn">
        Transfer <i class="fa-solid fa-arrow-up-from-bracket"></i>
    </a>
</div>
<!--SUCCESS-->
@if (TempData["WithdrawMessage"] != null)
{
    <div class="alert alert-success mt-2 text-center">
        @TempData["WithdrawMessage"]
    </div>
}
@if (TempData["DepositMessage"] != null)
{
    <div class="alert alert-success mt-2 text-center">
        @TempData["DepositMessage"]
    </div>
}
@if (TempData["TransferMessage"] != null)
{
    <div class="alert alert-success mt-2 text-center">
        @TempData["TransferMessage"]
    </div>
}
<!--ERROR-->
@if (TempData["NoAccount"] != null)
{
    <div class="alert alert-danger mt-2 text-center">
        @TempData["NoAccount"]
    </div>
}
@if (TempData["ErrorInactivatingAccount"] != null)
{
    <div class="alert alert-danger mt-2 text-center">
        @TempData["ErrorInactivatingAccount"]
    </div>
}
<!--Transaktioner i tabell -->
<div class="card mt-3">
    <div class="card-header p-1">
        <h6 class="m-0">Transactions</h6>
    </div>
    <div class="table-responsive">
        @if (Model.Account.Transactions.Any())
        {
            <table class="table table-sm table-striped mb-0">
                <thead>
                    <tr>
                        <th class="th-content">Date</th>
                        <th class="th-content">Type</th>
                        <th class="th-content">Operation</th>
                        <th class="th-content">Amount</th>
                        <th class="th-content">Balance</th>
                        <th class="th-content">Symbol</th>
                        <th class="th-content">Bank</th>
                    </tr>
                </thead>
                <tbody id="transactions-body">
                    @foreach (var tx in Model.Account.Transactions)
                    {
                        <tr class="table-row-view">
                            <td>@tx.Date.ToShortDateString()</td>
                            <td>@tx.Type</td>
                            <td>@tx.Operation</td>
                            <td>@tx.Amount.ToString("C", new System.Globalization.CultureInfo("de-DE"))</td>
                            <td>@tx.Balance.ToString("C", new System.Globalization.CultureInfo("de-DE"))</td>
                            <td>@tx.Symbol</td>
                            <td>@tx.Bank</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="p-3">
                <em>No transactions available for this account.</em>
            </div>
        }
    </div>

    <!-- Ladda fler knapp -->
    <div class="text-center p-3">
        <button class="btn btn-outline-secondary" id="loadMoreBtn" style="display: none;">
            Load more <i class="fa-solid fa-plus"></i>
        </button>
    </div>


</div>

@section Scripts {
    <script>
        let offset = 0;
        const pageSize = 20;
        const accountId = @Model.Account.AccountId;

        document.addEventListener("DOMContentLoaded", function () {
            loadTransactions(); // Första laddningen
        });

        document.getElementById("loadMoreBtn").addEventListener("click", function () {
            loadTransactions(); // Ladda fler
        });

        function loadTransactions() {
            fetch(`?handler=Transactions&accountId=${accountId}&offset=${offset}&pageSize=${pageSize}`)
                .then(response => response.json())
                .then(data => {
                    const tbody = document.getElementById("transactions-body");

                    data.forEach(tx => {
                        const row = document.createElement("tr");
                        row.classList.add("table-row-view");
                        row.innerHTML = `
                            <td>${tx.date}</td>
                            <td>${tx.type}</td>
                            <td>${tx.operation}</td>
                            <td>${formatCurrency(tx.amount)}</td>
                            <td>${formatCurrency(tx.balance)}</td>
                            <td>${tx.symbol ?? ""}</td>
                            <td>${tx.bank ?? ""}</td>
                        `;
                        tbody.appendChild(row);
                    });

                    offset += pageSize;

                    const loadMoreBtn = document.getElementById("loadMoreBtn");
                    if (data.length === pageSize) {
                        loadMoreBtn.style.display = "inline-block";
                    } else {
                        loadMoreBtn.style.display = "none";
                    }
                });
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('de-DE', {
                style: 'currency',
                currency: 'EUR'
            }).format(amount);
        }
    </script>
}
